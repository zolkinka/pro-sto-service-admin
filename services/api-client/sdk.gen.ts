// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AppGetHelloResponse, AppHealthCheckResponse, AuthLoginData, AuthLoginResponse, AuthLogoutResponse, AuthGetCurrentUserResponse, AuthRefreshResponse, RolesGetAllResponse, RolesCreateData, RolesCreateResponse, RolesGetOneData, RolesGetOneResponse, RolesUpdateData, RolesUpdateResponse, RolesDeleteData, RolesDeleteResponse, ClientAuthSendCodeData, ClientAuthSendCodeResponse, ClientAuthLoginData, ClientAuthLoginResponse, ClientAuthRefreshData, ClientAuthRefreshResponse, ClientAuthRegisterData, ClientAuthRegisterResponse, ClientAuthSetPhoneData, ClientAuthSetPhoneResponse, AdminAuthSendCodeData, AdminAuthSendCodeResponse, AdminAuthLoginData, AdminAuthLoginResponse, ClientGetMeResponse, ClientUpdateMeData, ClientUpdateMeResponse, ClientListCarsResponse, ClientCreateCarData, ClientCreateCarResponse, ClientGetCarData, ClientGetCarResponse, ClientUpdateCarData, ClientUpdateCarResponse, ClientDeleteCarData, ClientDeleteCarResponse, ClientListBookingsResponse, ServiceCenterListData, ServiceCenterListResponse, ServiceCenterGetOneData, ServiceCenterGetOneResponse, ServiceCenterGetSlotsData, ServiceCenterGetSlotsResponse, ServiceCenterToggleFavoriteData, ServiceCenterToggleFavoriteResponse, OperatingHoursGetAllData, OperatingHoursGetAllResponse, OperatingHoursUpdateRegularData, OperatingHoursUpdateRegularResponse, OperatingHoursCreateSpecialData, OperatingHoursCreateSpecialResponse, OperatingHoursUpdateData, OperatingHoursUpdateResponse, OperatingHoursDeleteData, OperatingHoursDeleteResponse, BookingCreateData, BookingCreateResponse, BookingListData, BookingListResponse, BookingGetOneData, BookingGetOneResponse, BookingCancelData, BookingCancelResponse, AdminBookingsGetListData, AdminBookingsGetListResponse, AdminBookingsGetOneData, AdminBookingsGetOneResponse, AdminBookingsUpdateData, AdminBookingsUpdateResponse, AdminBookingsUpdateStatusData, AdminBookingsUpdateStatusResponse, CarsControllerGetMakesData, CarsControllerGetMakesResponse, CarsControllerGetModelsByMakeIdData, CarsControllerGetModelsByMakeIdResponse, PaymentsControllerCreatePaymentData, PaymentsControllerCreatePaymentResponse, PaymentsControllerGetAllPaymentsResponse, PaymentsControllerGetPaymentData, PaymentsControllerGetPaymentResponse, PaymentsControllerGetPaymentByBookingData, PaymentsControllerGetPaymentByBookingResponse, PaymentsControllerUpdatePaymentStatusData, PaymentsControllerUpdatePaymentStatusResponse, PaymentsControllerHandleWebhookData, PaymentsControllerHandleWebhookResponse, AdminServicesGetAllData, AdminServicesGetAllResponse, AdminServicesCreateData, AdminServicesCreateResponse, AdminServicesGetOneData, AdminServicesGetOneResponse, AdminServicesUpdateData, AdminServicesUpdateResponse, AdminServicesDeleteData, AdminServicesDeleteResponse } from './types.gen';

/**
 * Hello World
 * @returns unknown
 * @throws ApiError
 */
export const appGetHello = (): CancelablePromise<AppGetHelloResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api'
    });
};

/**
 * Health check endpoint
 * Проверка работоспособности API
 * @returns unknown
 * @throws ApiError
 */
export const appHealthCheck = (): CancelablePromise<AppHealthCheckResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/health'
    });
};

/**
 * Аутентификация пользователя
 * Вход в систему через email и пароль. Устанавливает HTTP-only cookie с JWT токеном.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns AuthResponseDto Успешная авторизация
 * @throws ApiError
 */
export const authLogin = (data: AuthLoginData): CancelablePromise<AuthLoginResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/auth/login',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Невалидные данные',
            401: 'Неверный email или пароль',
            423: 'Аккаунт заблокирован',
            429: 'Превышено количество попыток входа'
        }
    });
};

/**
 * Выход из системы
 * Выход из системы. Удаляет HTTP-only cookie и добавляет токен в blacklist.
 * @returns LogoutResponseDto Успешный выход из системы
 * @throws ApiError
 */
export const authLogout = (): CancelablePromise<AuthLogoutResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/auth/logout',
        errors: {
            401: 'Токен недействителен или отсутствует'
        }
    });
};

/**
 * Получение информации о текущем пользователе
 * Возвращает информацию о текущем авторизованном пользователе.
 * @returns UserResponseDto Информация о текущем пользователе
 * @throws ApiError
 */
export const authGetCurrentUser = (): CancelablePromise<AuthGetCurrentUserResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/auth/me',
        errors: {
            401: 'Токен недействителен или отсутствует'
        }
    });
};

/**
 * Обновление токена
 * Обновляет JWT токен при активности пользователя. Старый токен добавляется в blacklist.
 * @returns RefreshResponseDto Токен успешно обновлен
 * @throws ApiError
 */
export const authRefresh = (): CancelablePromise<AuthRefreshResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/auth/refresh',
        errors: {
            401: 'Токен недействителен или отсутствует'
        }
    });
};

/**
 * Получение всех ролей
 * Возвращает список всех ролей в системе.
 * @returns Role Список ролей успешно получен
 * @throws ApiError
 */
export const rolesGetAll = (): CancelablePromise<RolesGetAllResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/roles'
    });
};

/**
 * Создание новой роли
 * Создает новую роль в системе.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Role Роль успешно создана
 * @throws ApiError
 */
export const rolesCreate = (data: RolesCreateData): CancelablePromise<RolesCreateResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/roles',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Невалидные данные для создания роли'
        }
    });
};

/**
 * Получение роли по UUID
 * Возвращает роль по указанному UUID.
 * @param data The data for the request.
 * @param data.uuid UUID роли
 * @returns Role Роль успешно найдена
 * @throws ApiError
 */
export const rolesGetOne = (data: RolesGetOneData): CancelablePromise<RolesGetOneResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/roles/{uuid}',
        path: {
            uuid: data.uuid
        },
        errors: {
            404: 'Роль не найдена'
        }
    });
};

/**
 * Обновление роли
 * Обновляет существующую роль по UUID.
 * @param data The data for the request.
 * @param data.uuid UUID роли для обновления
 * @param data.requestBody
 * @returns Role Роль успешно обновлена
 * @throws ApiError
 */
export const rolesUpdate = (data: RolesUpdateData): CancelablePromise<RolesUpdateResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/roles/{uuid}',
        path: {
            uuid: data.uuid
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Невалидные данные для обновления роли',
            404: 'Роль не найдена'
        }
    });
};

/**
 * Удаление роли
 * Удаляет роль по указанному UUID.
 * @param data The data for the request.
 * @param data.uuid UUID роли для уда��ения
 * @returns unknown Роль успешно удалена
 * @throws ApiError
 */
export const rolesDelete = (data: RolesDeleteData): CancelablePromise<RolesDeleteResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/roles/{uuid}',
        path: {
            uuid: data.uuid
        },
        errors: {
            404: 'Роль не найдена'
        }
    });
};

/**
 * Отправка одноразового кода по SMS
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Код отправлен
 * @throws ApiError
 */
export const clientAuthSendCode = (data: ClientAuthSendCodeData): CancelablePromise<ClientAuthSendCodeResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/client-auth/send-code',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Неверный формат телефона',
            429: 'Слишком часто'
        }
    });
};

/**
 * Вход по коду
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ClientAuthResponseDto
 * @throws ApiError
 */
export const clientAuthLogin = (data: ClientAuthLoginData): CancelablePromise<ClientAuthLoginResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/client-auth/login',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Неверный код / формат',
            410: 'Код истёк',
            429: 'Превышено количество попыток'
        }
    });
};

/**
 * Обновление пары токенов
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ClientAuthResponseDto
 * @throws ApiError
 */
export const clientAuthRefresh = (data: ClientAuthRefreshData): CancelablePromise<ClientAuthRefreshResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/client-auth/refresh',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            401: 'Неверный или просроченный refresh токен'
        }
    });
};

/**
 * Регистрация анонимного пользователя
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ClientAuthResponseDto
 * @throws ApiError
 */
export const clientAuthRegister = (data: ClientAuthRegisterData): CancelablePromise<ClientAuthRegisterResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/client-auth/register',
        body: data.requestBody,
        mediaType: 'application/json'
    });
};

/**
 * Установка номера телефона для авторизованного пользователя
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ClientAuthResponseDto
 * @throws ApiError
 */
export const clientAuthSetPhone = (data: ClientAuthSetPhoneData): CancelablePromise<ClientAuthSetPhoneResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/client-auth/set-phone',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Неверный код или телефон занят',
            401: 'Пользователь не авторизован',
            410: 'Код истёк'
        }
    });
};

/**
 * Отправка SMS кода для админа
 * @param data The data for the request.
 * @param data.requestBody
 * @returns AdminSendCodeResponseDto Код отправлен
 * @throws ApiError
 */
export const adminAuthSendCode = (data: AdminAuthSendCodeData): CancelablePromise<AdminAuthSendCodeResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/admin-auth/send-code',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Неверный формат телефона',
            404: 'Пользователь с таким телефоном не найден или не является админом',
            429: 'Слишком частые запросы'
        }
    });
};

/**
 * Вход админа по SMS коду
 * @param data The data for the request.
 * @param data.requestBody
 * @returns AdminAuthResponseDto Успешная авторизация
 * @throws ApiError
 */
export const adminAuthLogin = (data: AdminAuthLoginData): CancelablePromise<AdminAuthLoginResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/admin-auth/login',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Неверный код или формат',
            401: 'Пользователь не является админом',
            410: 'Код истёк',
            429: 'Превышено количество попыток'
        }
    });
};

/**
 * Получить данные текущего клиента
 * Возвращает профиль авторизованного клиента
 * @returns ClientResponseDto Данные клиента успешно получены
 * @throws ApiError
 */
export const clientGetMe = (): CancelablePromise<ClientGetMeResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/clients/me',
        errors: {
            401: 'Не авторизован',
            404: 'Клиент не найден'
        }
    });
};

/**
 * Обновить профиль клиента
 * Обновляет данные профиля авторизованного клиента
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ClientResponseDto Профиль клиента успешно обновлен
 * @throws ApiError
 */
export const clientUpdateMe = (data: ClientUpdateMeData): CancelablePromise<ClientUpdateMeResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/clients/me',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Некорректные данные',
            401: 'Не авторизован',
            404: 'Клиент не найден'
        }
    });
};

/**
 * Получить список автомобилей клиента
 * Возвращает все автомобили, принадлежащие авторизованному клиенту
 * @returns CarResponseDto Список автомобилей успешно получен
 * @throws ApiError
 */
export const clientListCars = (): CancelablePromise<ClientListCarsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/clients/me/cars',
        errors: {
            401: 'Не авторизован'
        }
    });
};

/**
 * Добавить автомобиль
 * Создает новый автомобиль для авторизованного клиента
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CarResponseDto Автомобиль успешно создан
 * @throws ApiError
 */
export const clientCreateCar = (data: ClientCreateCarData): CancelablePromise<ClientCreateCarResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/clients/me/cars',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Некорректные данные',
            401: 'Не авторизован'
        }
    });
};

/**
 * Получить данные автомобиля
 * Возвращает информацию о конкретном автомобиле клиента
 * @param data The data for the request.
 * @param data.carUuid Уникальный идентификатор автомобиля
 * @returns CarResponseDto Данные автомобиля успешно получены
 * @throws ApiError
 */
export const clientGetCar = (data: ClientGetCarData): CancelablePromise<ClientGetCarResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/clients/me/cars/{car_uuid}',
        path: {
            car_uuid: data.carUuid
        },
        errors: {
            401: 'Не авторизован',
            403: 'Автомобиль не принадлежит клиенту',
            404: 'Автомобиль не найден'
        }
    });
};

/**
 * Обновить данные автомобиля
 * Обновляет информацию об автомобиле клиента
 * @param data The data for the request.
 * @param data.carUuid Уникальный идентификатор автомобиля
 * @param data.requestBody
 * @returns CarResponseDto Данные автомобиля успешно обновлены
 * @throws ApiError
 */
export const clientUpdateCar = (data: ClientUpdateCarData): CancelablePromise<ClientUpdateCarResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/clients/me/cars/{car_uuid}',
        path: {
            car_uuid: data.carUuid
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Некорректные данные',
            401: 'Не авторизован',
            403: 'Автомобиль не принадлежит клиенту',
            404: 'Автомобиль не найден'
        }
    });
};

/**
 * Удалить автомобиль
 * Удаляет автомобиль из списка клиента
 * @param data The data for the request.
 * @param data.carUuid Уникальный идентификатор автомобиля
 * @returns void Автомобиль успешно удален
 * @throws ApiError
 */
export const clientDeleteCar = (data: ClientDeleteCarData): CancelablePromise<ClientDeleteCarResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/clients/me/cars/{car_uuid}',
        path: {
            car_uuid: data.carUuid
        },
        errors: {
            401: 'Не авторизован',
            403: 'Автомобиль не принадлежит клиенту',
            404: 'Автомобиль не найден'
        }
    });
};

/**
 * Получить список бронирований клиента
 * Возвращает все бронирования авторизованного клиента
 * @returns unknown Список бронирований успешно получен
 * @throws ApiError
 */
export const clientListBookings = (): CancelablePromise<ClientListBookingsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/clients/me/bookings',
        errors: {
            401: 'Не авторизован'
        }
    });
};

/**
 * Получить список сервисных центров
 * Возвращает список сервисных центров в указанном радиусе с возможностью фильтрации и сортировки
 * @param data The data for the request.
 * @param data.lat Широта местоположения пользователя
 * @param data.lon Долгота местоположения пользователя
 * @param data.radius Радиус поиска в метрах
 * @param data.category Категория услуг для фильтрации
 * @param data.search Поисковый запрос для фильтрации по названию или адресу сервисного центра
 * @param data.minRating Минимальный рейтинг сервисного центра
 * @param data.isOpenNow Фильтр по работающим в данный момент центрам
 * @param data.startPrice Минимальная цена услуги
 * @param data.endPrice Максимальная цена услуги
 * @param data.sortBy Критерий сортировки результатов
 * @param data.withFreeSlots Показывать только сервисные центры со свободными слотами (с учетом фильтров category)
 * @param data.businessType Фильтр по типу бизнеса сервисного центра
 * @param data.onlyFavorites Показывать только избранные сервисные центры
 * @returns ReducedServiceCenterResponseDto Список сервисных центров успешно получен
 * @throws ApiError
 */
export const serviceCenterList = (data: ServiceCenterListData = {}): CancelablePromise<ServiceCenterListResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/service-centers',
        query: {
            lat: data.lat,
            lon: data.lon,
            radius: data.radius,
            category: data.category,
            search: data.search,
            min_rating: data.minRating,
            is_open_now: data.isOpenNow,
            startPrice: data.startPrice,
            endPrice: data.endPrice,
            sort_by: data.sortBy,
            withFreeSlots: data.withFreeSlots,
            businessType: data.businessType,
            onlyFavorites: data.onlyFavorites
        },
        errors: {
            400: 'Некорректные параметры запроса'
        }
    });
};

/**
 * Получить детальную информацию о сервисном центре
 * Возвращает полную информацию о сервисном центре по его идентификатору
 * @param data The data for the request.
 * @param data.uuid Уникальный идентификатор сервисного центра
 * @returns DetailedServiceCenterResponseDto Данные сервисного центра успешно получены
 * @throws ApiError
 */
export const serviceCenterGetOne = (data: ServiceCenterGetOneData): CancelablePromise<ServiceCenterGetOneResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/service-centers/{uuid}',
        path: {
            uuid: data.uuid
        },
        errors: {
            404: 'Сервисный центр не найден'
        }
    });
};

/**
 * Получить доступные временные слоты
 * Возвращает список доступных временных слотов для записи на указанную дату и услугу
 * @param data The data for the request.
 * @param data.uuid Уникальный идентификатор сервисного центра
 * @param data.date Дата для поиска доступных слотов
 * @param data.serviceUuid Уникальный идентификатор услуги
 * @returns string Список доступных слотов успешно получен
 * @throws ApiError
 */
export const serviceCenterGetSlots = (data: ServiceCenterGetSlotsData): CancelablePromise<ServiceCenterGetSlotsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/service-centers/{uuid}/slots',
        path: {
            uuid: data.uuid
        },
        query: {
            date: data.date,
            service_uuid: data.serviceUuid
        },
        errors: {
            400: 'Некорректные параметры запроса',
            404: 'Сервисный центр или услуга не найдены'
        }
    });
};

/**
 * Добавить/удалить сервисный центр из избранного
 * Переключает статус сервисного центра в избранном пользователя
 * @param data The data for the request.
 * @param data.uuid Уникальный идентификатор сервисного центра
 * @returns unknown Статус избранного успешно изменен
 * @throws ApiError
 */
export const serviceCenterToggleFavorite = (data: ServiceCenterToggleFavoriteData): CancelablePromise<ServiceCenterToggleFavoriteResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/service-centers/{uuid}/favorite',
        path: {
            uuid: data.uuid
        },
        errors: {
            401: 'Пользователь не авторизован',
            404: 'Сервисный центр не найден'
        }
    });
};

/**
 * Получить все настройки времени работы
 * Получить регулярное расписание и специальные даты для сервисного центра
 * @param data The data for the request.
 * @param data.serviceCenterUuid UUID сервисного центра
 * @param data.type Фильтр по типу расписания
 * @param data.month Фильтр по месяцу для специальных дат (формат YYYY-MM)
 * @returns OperatingHoursListResponseDto Список настроек времени работы
 * @throws ApiError
 */
export const operatingHoursGetAll = (data: OperatingHoursGetAllData): CancelablePromise<OperatingHoursGetAllResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/admin/service-centers/{service_center_uuid}/operating-hours',
        path: {
            service_center_uuid: data.serviceCenterUuid
        },
        query: {
            type: data.type,
            month: data.month
        },
        errors: {
            404: 'Сервисный центр не найден'
        }
    });
};

/**
 * Обновить регулярное расписание
 * Обновить расписание работы на все дни недели
 * @param data The data for the request.
 * @param data.serviceCenterUuid UUID сервисного центра
 * @param data.requestBody
 * @returns OperatingHoursResponseDto Регулярное расписание обновлено
 * @throws ApiError
 */
export const operatingHoursUpdateRegular = (data: OperatingHoursUpdateRegularData): CancelablePromise<OperatingHoursUpdateRegularResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/admin/service-centers/{service_center_uuid}/operating-hours/regular',
        path: {
            service_center_uuid: data.serviceCenterUuid
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            404: 'Сервисный центр не найден'
        }
    });
};

/**
 * Добавить специальную дату
 * Добавить праздник, выходной или сокращенный день
 * @param data The data for the request.
 * @param data.serviceCenterUuid UUID сервисного центра
 * @param data.requestBody
 * @returns OperatingHoursResponseDto Специальная дата добавлена
 * @throws ApiError
 */
export const operatingHoursCreateSpecial = (data: OperatingHoursCreateSpecialData): CancelablePromise<OperatingHoursCreateSpecialResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/admin/service-centers/{service_center_uuid}/operating-hours/special',
        path: {
            service_center_uuid: data.serviceCenterUuid
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            404: 'Сервисный центр не найден'
        }
    });
};

/**
 * Обновить конкретную запись
 * Обновить существующую настройку времени работы
 * @param data The data for the request.
 * @param data.uuid UUID записи времени работы
 * @param data.serviceCenterUuid UUID сервисного центра
 * @param data.requestBody
 * @returns OperatingHoursResponseDto Запись обновлена
 * @throws ApiError
 */
export const operatingHoursUpdate = (data: OperatingHoursUpdateData): CancelablePromise<OperatingHoursUpdateResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/admin/service-centers/{service_center_uuid}/operating-hours/{uuid}',
        path: {
            uuid: data.uuid,
            service_center_uuid: data.serviceCenterUuid
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            404: 'Запись не найдена'
        }
    });
};

/**
 * Удалить специальную дату
 * Удалить настройку времени работы
 * @param data The data for the request.
 * @param data.uuid UUID записи времени работы
 * @param data.serviceCenterUuid UUID сервисного центра
 * @returns void Запись удалена
 * @throws ApiError
 */
export const operatingHoursDelete = (data: OperatingHoursDeleteData): CancelablePromise<OperatingHoursDeleteResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/admin/service-centers/{service_center_uuid}/operating-hours/{uuid}',
        path: {
            uuid: data.uuid,
            service_center_uuid: data.serviceCenterUuid
        },
        errors: {
            404: 'Запись не найдена'
        }
    });
};

/**
 * Создать бронирование
 * Создает новое бронирование услуги в сервисном центре для указанного автомобиля клиента
 * @param data The data for the request.
 * @param data.requestBody
 * @returns BookingResponseDto Бронирование успешно создано
 * @throws ApiError
 */
export const bookingCreate = (data: BookingCreateData): CancelablePromise<BookingCreateResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/bookings',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Некорректные данные запроса',
            401: 'Не авторизован',
            404: 'Услуга, сервисный центр или автомобиль не найдены',
            409: 'Конфликт времени бронирования'
        }
    });
};

/**
 * Получить список бронирований клиента
 * Возвращает список всех бронирований авторизованного клиента с поддержкой пагинации
 * @param data The data for the request.
 * @param data.limit Количество записей для возврата
 * @param data.offset Смещение для пагинации
 * @returns BookingResponseDto Список бронирований успешно получен
 * @throws ApiError
 */
export const bookingList = (data: BookingListData = {}): CancelablePromise<BookingListResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/bookings',
        query: {
            limit: data.limit,
            offset: data.offset
        },
        errors: {
            400: 'Некорректные параметры пагинации',
            401: 'Не авторизован'
        }
    });
};

/**
 * Получить детальную информацию о бронировании
 * Возвращает подробную информацию о бронировании с данными о клиенте, автомобиле, сервисном центре и услуге
 * @param data The data for the request.
 * @param data.uuid Уникальный идентификатор бронирования
 * @returns DetailedBookingResponseDto Детальная информация о бронировании получена
 * @throws ApiError
 */
export const bookingGetOne = (data: BookingGetOneData): CancelablePromise<BookingGetOneResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/bookings/{uuid}',
        path: {
            uuid: data.uuid
        },
        errors: {
            401: 'Не авторизован',
            403: 'Бронирование не принадлежит клиенту',
            404: 'Бронирование не найдено'
        }
    });
};

/**
 * Отменить бронирование
 * Отменяет подтвержденное бронирование. Отмена возможна только за 24 часа до начала услуги
 * @param data The data for the request.
 * @param data.uuid Уникальный идентификатор бронирования
 * @returns BookingResponseDto Бронирование успешно отменено
 * @throws ApiError
 */
export const bookingCancel = (data: BookingCancelData): CancelablePromise<BookingCancelResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/bookings/{uuid}/cancel',
        path: {
            uuid: data.uuid
        },
        errors: {
            400: 'Бронирование нельзя отменить (менее 24 часов до начала или неподходящий статус)',
            401: 'Не авторизован',
            403: 'Бронирование не принадлежит клиенту',
            404: 'Бронирование не найдено'
        }
    });
};

/**
 * Получить список бронирований для админ-панели
 * Возвращает список бронирований сервисного центра с фильтрацией по датам и статусам. Требуется аутентификация админа и доступ к указанному сервисному центру через projectUuid.
 * @param data The data for the request.
 * @param data.serviceCenterUuid UUID сервисного центра
 * @param data.dateFrom Начало диапазона дат (ISO 8601)
 * @param data.dateTo Конец диапазона дат (ISO 8601)
 * @param data.status Массив статусов для фильтрации: pending_confirmation, confirmed, completed, cancelled
 * @param data.limit Количество записей (default: 100)
 * @param data.offset Смещение для пагинации (default: 0)
 * @returns AdminBookingListResponseDto Список бронирований успешно получен
 * @throws ApiError
 */
export const adminBookingsGetList = (data: AdminBookingsGetListData): CancelablePromise<AdminBookingsGetListResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/admin/bookings',
        query: {
            service_center_uuid: data.serviceCenterUuid,
            date_from: data.dateFrom,
            date_to: data.dateTo,
            status: data.status,
            limit: data.limit,
            offset: data.offset
        },
        errors: {
            400: 'Некорректные параметры запроса',
            401: 'Не авторизован',
            403: 'Нет доступа к указанному сервисному центру',
            404: 'Сервисный центр не найден'
        }
    });
};

/**
 * Получить детальную информацию о бронировании
 * Возвращает подробную информацию о конкретном бронировании. Требуется аутентификация админа и доступ к сервисному центру через projectUuid.
 * @param data The data for the request.
 * @param data.uuid UUID бронирования
 * @returns DetailedBookingResponseDto Детальная информация о бронировании получена
 * @throws ApiError
 */
export const adminBookingsGetOne = (data: AdminBookingsGetOneData): CancelablePromise<AdminBookingsGetOneResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/admin/bookings/{uuid}',
        path: {
            uuid: data.uuid
        },
        errors: {
            401: 'Не авторизован',
            403: 'Нет доступа к этому бронированию',
            404: 'Бронирование не найдено'
        }
    });
};

/**
 * Редактировать бронирование
 * Позволяет админу изменять параметры бронирования: время начала, услугу, дополнительные услуги и комментарий. При изменении времени или услуги пересчитывается end_time и проверяется доступность слота.
 * @param data The data for the request.
 * @param data.uuid UUID бронирования
 * @param data.requestBody
 * @returns DetailedBookingResponseDto Бронирование успешно обновлено
 * @throws ApiError
 */
export const adminBookingsUpdate = (data: AdminBookingsUpdateData): CancelablePromise<AdminBookingsUpdateResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/admin/bookings/{uuid}',
        path: {
            uuid: data.uuid
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Невалидные данные, слот занят или нельзя редактировать в текущем статусе',
            401: 'Не авторизован',
            403: 'Нет доступа к этому бронированию',
            404: 'Бронирование не найдено',
            409: 'Временной слот занят'
        }
    });
};

/**
 * Изменить статус бронирования
 * Позволяет изменить статус бронирования с соблюдением правил переходов:
 * - pending_confirmation → confirmed, cancelled
 * - confirmed → completed, cancelled
 * - completed и cancelled — финальные статусы (нельзя изменить)
 *
 * При переходе в статус 'cancelled' для оплаченных бронирований автоматически устанавливается payment_status='refund_pending'.
 * @param data The data for the request.
 * @param data.uuid UUID бронирования
 * @param data.requestBody
 * @returns UpdateBookingStatusResponseDto Статус успешно изменен
 * @throws ApiError
 */
export const adminBookingsUpdateStatus = (data: AdminBookingsUpdateStatusData): CancelablePromise<AdminBookingsUpdateStatusResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/admin/bookings/{uuid}/status',
        path: {
            uuid: data.uuid
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Невалидный переход статуса (например, попытка изменить финальный статус или недопустимый переход)',
            401: 'Не авторизован',
            403: 'Нет доступа к этому бронированию',
            404: 'Бронирование не найдено'
        }
    });
};

/**
 * Получить список марок автомобилей
 * Возвращает пагинированный список всех марок автомобилей
 * @param data The data for the request.
 * @param data.page Номер страницы (начинается с 1)
 * @param data.limit Количество элементов на странице
 * @returns unknown Список марок успешно получен
 * @throws ApiError
 */
export const carsControllerGetMakes = (data: CarsControllerGetMakesData = {}): CancelablePromise<CarsControllerGetMakesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/cars/makes',
        query: {
            page: data.page,
            limit: data.limit
        }
    });
};

/**
 * Получить модели автомобиля по марке
 * Возвращает пагинированный список моделей для указанной марки автомобиля
 * @param data The data for the request.
 * @param data.id Идентификатор марки автомобиля
 * @param data.page Номер страницы (начинается с 1)
 * @param data.limit Количество элементов на странице
 * @returns unknown Список моделей успешно получен
 * @throws ApiError
 */
export const carsControllerGetModelsByMakeId = (data: CarsControllerGetModelsByMakeIdData): CancelablePromise<CarsControllerGetModelsByMakeIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/cars/makes/{id}/models',
        path: {
            id: data.id
        },
        query: {
            page: data.page,
            limit: data.limit
        },
        errors: {
            404: 'Марка автомобиля не найдена'
        }
    });
};

/**
 * Создать платеж для бронирования
 * @param data The data for the request.
 * @param data.requestBody
 * @returns PaymentResponseDto Платеж создан успешно
 * @throws ApiError
 */
export const paymentsControllerCreatePayment = (data: PaymentsControllerCreatePaymentData): CancelablePromise<PaymentsControllerCreatePaymentResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/payments',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Некорректные данные',
            404: 'Бронирование не найдено'
        }
    });
};

/**
 * Получить все платежи (для админки)
 * @returns PaymentResponseDto Список всех платежей
 * @throws ApiError
 */
export const paymentsControllerGetAllPayments = (): CancelablePromise<PaymentsControllerGetAllPaymentsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/payments'
    });
};

/**
 * Получить информацию о платеже
 * @param data The data for the request.
 * @param data.uuid
 * @returns PaymentResponseDto Информация о платеже
 * @throws ApiError
 */
export const paymentsControllerGetPayment = (data: PaymentsControllerGetPaymentData): CancelablePromise<PaymentsControllerGetPaymentResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/payments/{uuid}',
        path: {
            uuid: data.uuid
        },
        errors: {
            404: 'Платеж не найден'
        }
    });
};

/**
 * Получить платеж по UUID бронирования
 * @param data The data for the request.
 * @param data.bookingUuid
 * @returns PaymentResponseDto Информация о платеже
 * @throws ApiError
 */
export const paymentsControllerGetPaymentByBooking = (data: PaymentsControllerGetPaymentByBookingData): CancelablePromise<PaymentsControllerGetPaymentByBookingResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/payments/booking/{bookingUuid}',
        path: {
            bookingUuid: data.bookingUuid
        },
        errors: {
            404: 'Платеж не найден'
        }
    });
};

/**
 * Обновить статус платежа
 * @param data The data for the request.
 * @param data.uuid
 * @returns PaymentResponseDto Статус платежа обновлен
 * @throws ApiError
 */
export const paymentsControllerUpdatePaymentStatus = (data: PaymentsControllerUpdatePaymentStatusData): CancelablePromise<PaymentsControllerUpdatePaymentStatusResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/payments/{uuid}/status',
        path: {
            uuid: data.uuid
        },
        errors: {
            404: 'Платеж не найден'
        }
    });
};

/**
 * Webhook для получения уведомлений от платежной системы
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Webhook обработан
 * @throws ApiError
 */
export const paymentsControllerHandleWebhook = (data: PaymentsControllerHandleWebhookData): CancelablePromise<PaymentsControllerHandleWebhookResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/payments/webhook',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Некорректные данные',
            404: 'Платеж не найден'
        }
    });
};

/**
 * Получить список всех услуг
 * Возвращает список услуг с возможностью фильтрации по различным параметрам. Услуги фильтруются по проекту текущего пользователя.
 * @param data The data for the request.
 * @param data.businessType Тип бизнеса (мойка или шиномонтаж)
 * @param data.serviceType Тип услуги (основная или дополнительная)
 * @param data.category Категория услуги
 * @param data.isActive Фильтр по активности
 * @returns Service Список услуг успешно получен
 * @throws ApiError
 */
export const adminServicesGetAll = (data: AdminServicesGetAllData = {}): CancelablePromise<AdminServicesGetAllResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/admin/services',
        query: {
            business_type: data.businessType,
            service_type: data.serviceType,
            category: data.category,
            is_active: data.isActive
        },
        errors: {
            401: 'Не авторизован',
            403: 'Нет доступа'
        }
    });
};

/**
 * Создать новую услугу
 * Создает новую услугу с ценами в системе
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Service Услуга успешно создана
 * @throws ApiError
 */
export const adminServicesCreate = (data: AdminServicesCreateData): CancelablePromise<AdminServicesCreateResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/admin/services',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Некорректные данные',
            401: 'Не авторизован',
            403: 'Нет доступа (только ADMIN)'
        }
    });
};

/**
 * Получить детальную информацию об услуге
 * Возвращает полную информацию об услуге включая все цены
 * @param data The data for the request.
 * @param data.uuid UUID услуги
 * @returns Service Услуга успешно получена
 * @throws ApiError
 */
export const adminServicesGetOne = (data: AdminServicesGetOneData): CancelablePromise<AdminServicesGetOneResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/admin/services/{uuid}',
        path: {
            uuid: data.uuid
        },
        errors: {
            401: 'Не авторизован',
            404: 'Услуга не найдена'
        }
    });
};

/**
 * Обновить существующую услугу
 * Обновляет данные услуги и её цены
 * @param data The data for the request.
 * @param data.uuid UUID услуги
 * @param data.requestBody
 * @returns Service Услуга успешно обновлена
 * @throws ApiError
 */
export const adminServicesUpdate = (data: AdminServicesUpdateData): CancelablePromise<AdminServicesUpdateResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/admin/services/{uuid}',
        path: {
            uuid: data.uuid
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Некорректные данные',
            401: 'Не авторизован',
            403: 'Нет доступа (только ADMIN)',
            404: 'Услуга не найдена'
        }
    });
};

/**
 * Удалить услугу (soft delete)
 * Выполняет мягкое удаление услуги. Проверяет наличие активных бронирований
 * @param data The data for the request.
 * @param data.uuid UUID услуги
 * @returns unknown Услуга успешно удалена
 * @throws ApiError
 */
export const adminServicesDelete = (data: AdminServicesDeleteData): CancelablePromise<AdminServicesDeleteResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/admin/services/{uuid}',
        path: {
            uuid: data.uuid
        },
        errors: {
            400: 'Невозможно удалить услугу (есть активные бронирования)',
            401: 'Не авторизован',
            403: 'Нет доступа (только ADMIN)',
            404: 'Услуга не найдена'
        }
    });
};