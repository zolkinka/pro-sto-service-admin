// This file is auto-generated by @hey-api/openapi-ts

export type AdminAuthResponseDto = {
    success: boolean;
    message: string;
    accessToken: string;
    refreshToken: string;
    user: AdminUserDto;
};

export type AdminLoginDto = {
    /**
     * Номер телефона в формате +79991234567
     */
    phone: string;
    /**
     * 4-значный SMS код
     */
    code: string;
};

export type AdminSendCodeDto = {
    /**
     * Номер телефона в формате +79991234567
     */
    phone: string;
};

export type AdminSendCodeResponseDto = {
    success: boolean;
    message: string;
};

export type AdminUserDto = {
    uuid: string;
    email: string;
    name: string;
    phone: string;
    role: RoleResponseDto;
};

export type AuthResponseDto = {
    /**
     * Статус успешности операции
     */
    success: boolean;
    /**
     * Сообщение о результате операции
     */
    message: string;
    /**
     * JWT токен доступа
     */
    accessToken: string;
    /**
     * UUID проекта пользователя
     */
    projectUuid: string;
    /**
     * Информация о пользователе
     */
    user: (UserResponseDto);
};

export type BookingCarDto = {
    /**
     * Уникальный идентификатор автомобиля
     */
    uuid: string;
    /**
     * Марка автомобиля
     */
    make: string;
    /**
     * Модель автомобиля
     */
    model: string;
    /**
     * Класс автомобиля
     */
    class: string;
    /**
     * Номерной знак автомобиля
     */
    license_plate: {
        [key: string]: unknown;
    } | null;
};

export type BookingClientDto = {
    /**
     * Уникальный идентификатор клиента
     */
    uuid: string;
    /**
     * Имя клиента
     */
    name: {
        [key: string]: unknown;
    } | null;
    /**
     * Номер телефона клиента
     */
    phone: string;
    /**
     * Email адрес клиента
     */
    email: {
        [key: string]: unknown;
    } | null;
};

export type BookingResponseDto = {
    /**
     * Уникальный идентификатор бронирования
     */
    uuid: string;
    /**
     * Идентификатор клиента
     */
    client_uuid: string;
    /**
     * Идентификатор автомобиля
     */
    car_uuid: string;
    /**
     * Идентификатор сервисного центра
     */
    service_center_uuid: string;
    /**
     * Идентификатор услуги
     */
    service_uuid: string;
    /**
     * Название сервисного центра
     */
    serviceCenterName: string;
    /**
     * Адрес сервисного центра
     */
    serviceCenterAddress: string;
    /**
     * Тип бизнеса сервисного центра
     */
    serviceBusinessType: 'tire_service' | 'car_wash';
    /**
     * Время начала бронирования
     */
    start_time: string;
    /**
     * Время окончания бронирования
     */
    end_time: string;
    /**
     * Статус бронирования
     */
    status: 'pending_confirmation' | 'confirmed' | 'completed' | 'cancelled';
    /**
     * Общая стоимость
     */
    total_cost: number;
    /**
     * Статус оплаты
     */
    payment_status: 'pending' | 'paid' | 'refund_pending';
    /**
     * Способ оплаты
     */
    payment_method: ('card' | 'sbp' | 'cash') | null;
    /**
     * Комментарий клиента
     */
    client_comment: {
        [key: string]: unknown;
    } | null;
    /**
     * Дата создания бронирования
     */
    created_at: string;
    /**
     * Дата последнего обновления
     */
    updated_at: string;
};

export namespace BookingResponseDto {
    /**
     * Тип бизнеса сервисного центра
     */
    export enum serviceBusinessType {
        TIRE_SERVICE = 'tire_service',
        CAR_WASH = 'car_wash'
    }
    /**
     * Статус бронирования
     */
    export enum status {
        PENDING_CONFIRMATION = 'pending_confirmation',
        CONFIRMED = 'confirmed',
        COMPLETED = 'completed',
        CANCELLED = 'cancelled'
    }
    /**
     * Статус оплаты
     */
    export enum payment_status {
        PENDING = 'pending',
        PAID = 'paid',
        REFUND_PENDING = 'refund_pending'
    }
    /**
     * Способ оплаты
     */
    export enum payment_method {
        CARD = 'card',
        SBP = 'sbp',
        CASH = 'cash'
    }
}

export type BookingServiceCenterDto = {
    /**
     * Уникальный идентификатор сервисного центра
     */
    uuid: string;
    /**
     * Название сервисного центра
     */
    name: string;
    /**
     * Адрес сервисного центра
     */
    address: string;
    /**
     * URL логотипа сервисного центра
     */
    logo_url: {
        [key: string]: unknown;
    } | null;
};

export type BookingServiceDto = {
    /**
     * Уникальный идентификатор услуги
     */
    uuid: string;
    /**
     * Название услуги
     */
    name: string;
    /**
     * Описание услуги
     */
    description: (string) | null;
    /**
     * Стоимость услуги
     */
    price: number;
    /**
     * Продолжительность услуги в минутах
     */
    duration_minutes: number;
    /**
     * Категория услуги
     */
    category: string;
};

export type CarResponseDto = {
    /**
     * Уникальный идентификатор автомобиля
     */
    uuid: string;
    /**
     * Идентификатор владельца автомобиля
     */
    client_uuid: string;
    /**
     * Марка автомобиля
     */
    make: string;
    /**
     * Модель автомобиля
     */
    model: string;
    /**
     * Цвет автомобиля
     */
    color: (string) | null;
    /**
     * Размер шин
     */
    tire_size: (string) | null;
    /**
     * Класс автомобиля
     */
    class: string;
    /**
     * Упрощённый класс автомобиля для ценообразования
     */
    simple_car_class: 'sedan' | 'crossover' | 'suv' | 'minivan';
    /**
     * Номерной знак автомобиля
     */
    license_plate: {
        [key: string]: unknown;
    } | null;
    /**
     * Путь к сгенерированному изображению автомобиля
     */
    generated_image: (string) | null;
    /**
     * Дата создания записи
     */
    created_at: string;
    /**
     * Дата последнего обновления записи
     */
    updated_at: string;
};

export namespace CarResponseDto {
    /**
     * Упрощённый класс автомобиля для ценообразования
     */
    export enum simple_car_class {
        SEDAN = 'sedan',
        CROSSOVER = 'crossover',
        SUV = 'suv',
        MINIVAN = 'minivan'
    }
}

export type ClientAuthResponseDto = {
    accessToken: string;
    refreshToken: string;
    client: ClientInfoDto;
};

export type ClientInfoDto = {
    uuid: string;
    phone: {
        [key: string]: unknown;
    } | null;
};

export type ClientLoginDto = {
    phone: string;
    code: string;
};

export type ClientResponseDto = {
    /**
     * Уникальный идентификатор клиента
     */
    uuid: string;
    /**
     * Имя клиента
     */
    name: {
        [key: string]: unknown;
    } | null;
    /**
     * Номер телефона клиента
     */
    phone: string;
    /**
     * Email адрес клиента
     */
    email: {
        [key: string]: unknown;
    } | null;
    /**
     * Настройки уведомлений клиента
     */
    notification_settings: {
        [key: string]: unknown;
    };
    /**
     * Дата создания записи
     */
    created_at: string;
    /**
     * Дата последнего обновления записи
     */
    updated_at: string;
};

export type CreateBookingDto = {
    /**
     * Уникальный идентификатор сервисного центра
     */
    service_center_uuid: string;
    /**
     * Уникальный идентификатор услуги
     */
    service_uuid: string;
    /**
     * Уникальный идентификатор автомобиля клиента
     */
    car_uuid: string;
    /**
     * Время начала бронирования в формате ISO8601 UTC
     */
    start_time: string;
    /**
     * Способ оплаты услуги
     */
    payment_method: 'card' | 'sbp' | 'cash';
    /**
     * Массив UUID дополнительных услуг
     */
    additionalServiceUuids?: Array<string>;
    /**
     * Комментарий клиента к бронированию
     */
    client_comment?: string;
};

export namespace CreateBookingDto {
    /**
     * Способ оплаты услуги
     */
    export enum payment_method {
        CARD = 'card',
        SBP = 'sbp',
        CASH = 'cash'
    }
}

export type CreateCarDto = {
    /**
     * Марка автомобиля
     */
    make: string;
    /**
     * Модель автомобиля
     */
    model: string;
    /**
     * Цвет автомобиля
     */
    color?: string;
    /**
     * Размер шин
     */
    tire_size?: string;
    /**
     * Класс автомобиля
     */
    class?: string;
    /**
     * Номерной знак автомобиля
     */
    license_plate?: string;
};

export type CreatePaymentDto = {
    /**
     * UUID бронирования
     */
    booking_uuid: string;
    /**
     * Метод оплаты
     */
    payment_method: 'acquiring' | 'sbp';
    /**
     * URL для редиректа после успешной оплаты
     */
    success_url?: string;
    /**
     * URL для редиректа после неудачной оплаты
     */
    fail_url?: string;
    /**
     * Описание платежа
     */
    description?: string;
};

export namespace CreatePaymentDto {
    /**
     * Метод оплаты
     */
    export enum payment_method {
        ACQUIRING = 'acquiring',
        SBP = 'sbp'
    }
}

export type CreateRoleDto = {
    [key: string]: unknown;
};

export type CreateServiceDto = {
    /**
     * Название услуги
     */
    name: string;
    /**
     * Описание услуги
     */
    description?: string;
    /**
     * Длительность услуги в минутах
     */
    duration_minutes: number;
    /**
     * Категория услуги
     */
    category: string;
    /**
     * Тип бизнеса
     */
    business_type: 'tire_service' | 'car_wash';
    /**
     * Тип услуги
     */
    service_type: 'main' | 'additional';
    /**
     * Дополнительные заметки
     */
    notes?: string;
    /**
     * Массив цен для услуги
     */
    servicePrices: Array<CreateServicePriceDto>;
    /**
     * UUID сервисного центра
     */
    service_center_uuid: string;
};

export namespace CreateServiceDto {
    /**
     * Тип бизнеса
     */
    export enum business_type {
        TIRE_SERVICE = 'tire_service',
        CAR_WASH = 'car_wash'
    }
    /**
     * Тип услуги
     */
    export enum service_type {
        MAIN = 'main',
        ADDITIONAL = 'additional'
    }
}

export type CreateServicePriceDto = {
    /**
     * Тип параметра ценообразования
     */
    parameter_type: 'simple_car_class' | 'wheel_size';
    /**
     * Значение параметра (sedan, crossover, suv, minivan, R13-R22)
     */
    parameter_value: string;
    /**
     * Цена услуги
     */
    price: number;
    /**
     * Активность цены
     */
    is_active: boolean;
};

export namespace CreateServicePriceDto {
    /**
     * Тип параметра ценообразования
     */
    export enum parameter_type {
        SIMPLE_CAR_CLASS = 'simple_car_class',
        WHEEL_SIZE = 'wheel_size'
    }
}

export type DetailedBookingResponseDto = {
    /**
     * Уникальный идентификатор бронирования
     */
    uuid: string;
    /**
     * Идентификатор клиента
     */
    client_uuid: string;
    /**
     * Идентификатор автомобиля
     */
    car_uuid: string;
    /**
     * Идентификатор сервисного центра
     */
    service_center_uuid: string;
    /**
     * Идентификатор услуги
     */
    service_uuid: string;
    /**
     * Название сервисного центра
     */
    serviceCenterName: string;
    /**
     * Адрес сервисного центра
     */
    serviceCenterAddress: string;
    /**
     * Тип бизнеса сервисного центра
     */
    serviceBusinessType: 'tire_service' | 'car_wash';
    /**
     * Время начала бронирования
     */
    start_time: string;
    /**
     * Время окончания бронирования
     */
    end_time: string;
    /**
     * Статус бронирования
     */
    status: 'pending_confirmation' | 'confirmed' | 'completed' | 'cancelled';
    /**
     * Общая стоимость
     */
    total_cost: number;
    /**
     * Статус оплаты
     */
    payment_status: 'pending' | 'paid' | 'refund_pending';
    /**
     * Способ оплаты
     */
    payment_method: ('card' | 'sbp' | 'cash') | null;
    /**
     * Комментарий клиента
     */
    client_comment: {
        [key: string]: unknown;
    } | null;
    /**
     * Дата создания бронирования
     */
    created_at: string;
    /**
     * Дата последнего обновления
     */
    updated_at: string;
    /**
     * Информация о клиенте
     */
    client: (BookingClientDto);
    /**
     * Информация об автомобиле
     */
    car: (BookingCarDto);
    /**
     * Информация о сервисном центре
     */
    service_center: (BookingServiceCenterDto);
    /**
     * Информация об услуге
     */
    service: (BookingServiceDto);
    /**
     * Дополнительные услуги
     */
    additionalServices?: Array<BookingServiceDto>;
};

export namespace DetailedBookingResponseDto {
    /**
     * Тип бизнеса сервисного центра
     */
    export enum serviceBusinessType {
        TIRE_SERVICE = 'tire_service',
        CAR_WASH = 'car_wash'
    }
    /**
     * Статус бронирования
     */
    export enum status {
        PENDING_CONFIRMATION = 'pending_confirmation',
        CONFIRMED = 'confirmed',
        COMPLETED = 'completed',
        CANCELLED = 'cancelled'
    }
    /**
     * Статус оплаты
     */
    export enum payment_status {
        PENDING = 'pending',
        PAID = 'paid',
        REFUND_PENDING = 'refund_pending'
    }
    /**
     * Способ оплаты
     */
    export enum payment_method {
        CARD = 'card',
        SBP = 'sbp',
        CASH = 'cash'
    }
}

export type DetailedServiceCenterResponseDto = {
    /**
     * Уникальный идентификатор сервисного центра
     */
    uuid: string;
    /**
     * Название сервисного центра
     */
    name: string;
    /**
     * Адрес сервисного центра
     */
    address: string;
    /**
     * Местоположение сервисного центра
     */
    location: (ServiceCenterLocationDto);
    /**
     * Описание сервисного центра
     */
    description: {
        [key: string]: unknown;
    } | null;
    /**
     * URL логотипа сервисного центра
     */
    logo_url: {
        [key: string]: unknown;
    } | null;
    /**
     * URL фотографий галереи
     */
    photo_gallery_urls: Array<string>;
    /**
     * Часы работы по дням недели
     */
    working_hours: (ServiceCenterWorkingHoursDto);
    /**
     * Контактная информация
     */
    contacts: (ServiceCenterContactsDto);
    /**
     * Внешний рейтинг сервисного центра
     */
    external_rating: {
        [key: string]: unknown;
    } | null;
    /**
     * Находится ли сервисный центр в избранном у пользователя
     */
    isFavorite?: boolean;
    /**
     * Дата создания записи
     */
    created_at: string;
    /**
     * Дата последнего обновления записи
     */
    updated_at: string;
    /**
     * Все услуги сервисного центра (для обратной совместимости)
     */
    services: Array<ServiceDto>;
    /**
     * Основные услуги сервисного центра
     */
    mainServices: Array<ServiceDto>;
    /**
     * Дополнительные услуги сервисного центра
     */
    additionalServices: Array<ServiceDto>;
};

export type ErrorResponseDto = {
    /**
     * Статус успешности операции
     */
    success: boolean;
    /**
     * Информация об ошибке
     */
    error: {
        /**
         * Код ошибки
         */
        code?: string;
        /**
         * Сообщение об ошибке
         */
        message?: string;
        /**
         * Детали ошибки
         */
        details?: Array<string>;
    };
};

export type LoginDto = {
    /**
     * Email пользователя
     */
    email: string;
    /**
     * Пароль пользователя
     */
    password: string;
};

export type LogoutResponseDto = {
    /**
     * Статус успешности операции
     */
    success: boolean;
    /**
     * Сообщение о результате операции
     */
    message: string;
};

export type PaymentResponseDto = {
    /**
     * UUID платежа
     */
    uuid: string;
    /**
     * UUID бронирования
     */
    booking_uuid: string;
    /**
     * Сумма платежа
     */
    amount: number;
    /**
     * Валюта
     */
    currency: string;
    /**
     * Метод оплаты
     */
    payment_method: 'acquiring' | 'sbp';
    /**
     * Статус платежа
     */
    status: 'pending' | 'processing' | 'success' | 'failed' | 'refunded';
    /**
     * ID операции в Точка Банке
     */
    tochka_operation_id: {
        [key: string]: unknown;
    } | null;
    /**
     * URL для оплаты
     */
    payment_url: {
        [key: string]: unknown;
    } | null;
    /**
     * QR код для СБП (Base64 или payload строка)
     */
    qr_code: {
        [key: string]: unknown;
    } | null;
    /**
     * Сообщение об ошибке
     */
    error_message: {
        [key: string]: unknown;
    } | null;
    /**
     * Дата и время оплаты
     */
    paid_at: {
        [key: string]: unknown;
    } | null;
    /**
     * Дата создания
     */
    created_at: string;
    /**
     * Дата обновления
     */
    updated_at: string;
};

export namespace PaymentResponseDto {
    /**
     * Метод оплаты
     */
    export enum payment_method {
        ACQUIRING = 'acquiring',
        SBP = 'sbp'
    }
    /**
     * Статус платежа
     */
    export enum status {
        PENDING = 'pending',
        PROCESSING = 'processing',
        SUCCESS = 'success',
        FAILED = 'failed',
        REFUNDED = 'refunded'
    }
}

export type ReducedServiceCenterResponseDto = {
    /**
     * Уникальный идентификатор сервисного центра
     */
    uuid: string;
    /**
     * Название сервисного центра
     */
    name: string;
    /**
     * Адрес сервисного центра
     */
    address: string;
    /**
     * Координаты местоположения сервисного центра
     */
    location: (ServiceCenterLocationDto);
    /**
     * Внешний рейтинг сервисного центра
     */
    external_rating: {
        [key: string]: unknown;
    } | null;
    /**
     * Расстояние до сервисного центра в метрах
     */
    distance_meters: number;
    /**
     * URL логотипа сервисного центра
     */
    logo_url: {
        [key: string]: unknown;
    } | null;
    /**
     * Открыт ли сервисный центр в данный момент
     */
    is_open_now?: boolean;
    /**
     * Находится ли сервисный центр в избранном у пользователя
     */
    isFavorite?: boolean;
    /**
     * Дата и время ближайшего доступного слота для записи
     */
    closestSlot?: string;
    /**
     * Минимальная цена за услугу в сервисном центре исходя из текущей фильтрации
     */
    priceStart?: number;
    /**
     * Тип бизнеса сервисного центра
     */
    business_type: 'tire_service' | 'car_wash';
};

export namespace ReducedServiceCenterResponseDto {
    /**
     * Тип бизнеса сервисного центра
     */
    export enum business_type {
        TIRE_SERVICE = 'tire_service',
        CAR_WASH = 'car_wash'
    }
}

export type RefreshDto = {
    /**
     * Refresh токен
     */
    refreshToken: string;
};

export type RefreshResponseDto = {
    /**
     * Статус успешности операции
     */
    success: boolean;
    /**
     * Сообщение о результате операции
     */
    message: string;
    /**
     * Новый JWT токен доступа
     */
    accessToken: string;
};

export type Role = {
    [key: string]: unknown;
};

export type RoleResponseDto = {
    /**
     * UUID роли
     */
    uuid: string;
    /**
     * Название роли
     */
    name: string;
    /**
     * Уникальный ключ роли
     */
    key: string;
    /**
     * Тип роли
     */
    type: 'ADMIN' | 'USER' | 'CLIENT';
    /**
     * Описание роли
     */
    description: string;
    /**
     * Список разрешений роли
     */
    permissions: Array<string>;
};

export namespace RoleResponseDto {
    /**
     * Тип роли
     */
    export enum type {
        ADMIN = 'ADMIN',
        USER = 'USER',
        CLIENT = 'CLIENT'
    }
}

export type SendCodeDto = {
    phone: string;
};

export type Service = {
    [key: string]: unknown;
};

export type ServiceCenterContactsDto = {
    /**
     * Номер телефона
     */
    phone?: string;
    /**
     * Email адрес
     */
    email?: string;
    /**
     * Веб-сайт
     */
    website?: string;
};

export type ServiceCenterLocationDto = {
    /**
     * Широта местоположения
     */
    lat: number;
    /**
     * Долгота местоположения
     */
    lon: number;
};

export type ServiceCenterWorkingHoursDto = {
    /**
     * Понедельник
     */
    mon?: string;
    /**
     * Вторник
     */
    tue?: string;
    /**
     * Среда
     */
    wed?: string;
    /**
     * Четверг
     */
    thu?: string;
    /**
     * Пятница
     */
    fri?: string;
    /**
     * Суббота
     */
    sat?: string;
    /**
     * Воскресенье
     */
    sun?: string;
};

export type ServiceDto = {
    /**
     * Уникальный идентификатор услуги
     */
    uuid: string;
    /**
     * Название услуги
     */
    name: string;
    /**
     * Цена услуги (базовая, для обратной совместимости)
     */
    price: number;
    /**
     * Длительность услуги в минутах
     */
    duration_minutes: number;
    /**
     * Категория услуги
     */
    category: string;
    /**
     * Тип бизнеса
     */
    business_type: 'tire_service' | 'car_wash';
    /**
     * Тип услуги
     */
    service_type: 'main' | 'additional';
    /**
     * Описание услуги
     */
    description: (string) | null;
    /**
     * Дополнительные заметки
     */
    notes: (string) | null;
    /**
     * Массив цен для разных параметров (класс авто или размер колеса)
     */
    servicePrices?: Array<{
        uuid?: string;
        parameter_type?: 'simple_car_class' | 'wheel_size';
        parameter_value?: string;
        price?: number;
        is_active?: boolean;
    }>;
};

export namespace ServiceDto {
    /**
     * Тип бизнеса
     */
    export enum business_type {
        TIRE_SERVICE = 'tire_service',
        CAR_WASH = 'car_wash'
    }
    /**
     * Тип услуги
     */
    export enum service_type {
        MAIN = 'main',
        ADDITIONAL = 'additional'
    }
}

export type SetPhoneDto = {
    /**
     * Номер телефона
     */
    phone: string;
    /**
     * Код подтверждения из SMS
     */
    code: string;
};

export type UpdateCarDto = {
    /**
     * Марка автомобиля
     */
    make?: string;
    /**
     * Модель автомобиля
     */
    model?: string;
    /**
     * Цвет автомобиля
     */
    color?: string;
    /**
     * Размер шин
     */
    tire_size?: string;
    /**
     * Класс автомобиля
     */
    class?: string;
    /**
     * Номерной знак автомобиля
     */
    license_plate?: string;
};

export type UpdateClientProfileDto = {
    /**
     * Имя клиента
     */
    name?: string;
    /**
     * Email клиента
     */
    email?: string;
    /**
     * Настройки уведомлений клиента
     */
    notification_settings?: {
        [key: string]: unknown;
    };
};

export type UpdateRoleDto = {
    [key: string]: unknown;
};

export type UpdateServiceDto = {
    /**
     * Название услуги
     */
    name?: string;
    /**
     * Описание услуги
     */
    description?: string;
    /**
     * Длительность услуги в минутах
     */
    duration_minutes?: number;
    /**
     * Категория услуги
     */
    category?: string;
    /**
     * Тип бизнеса
     */
    business_type?: 'tire_service' | 'car_wash';
    /**
     * Тип услуги
     */
    service_type?: 'main' | 'additional';
    /**
     * Дополнительные заметки
     */
    notes?: string;
    /**
     * Массив цен для услуги
     */
    servicePrices?: Array<UpdateServicePriceDto>;
};

export namespace UpdateServiceDto {
    /**
     * Тип бизнеса
     */
    export enum business_type {
        TIRE_SERVICE = 'tire_service',
        CAR_WASH = 'car_wash'
    }
    /**
     * Тип услуги
     */
    export enum service_type {
        MAIN = 'main',
        ADDITIONAL = 'additional'
    }
}

export type UpdateServicePriceDto = {
    /**
     * UUID цены (если передан - обновляем существующую)
     */
    uuid?: string;
    /**
     * Тип параметра ценообразования
     */
    parameter_type?: 'simple_car_class' | 'wheel_size';
    /**
     * Значение параметра
     */
    parameter_value?: string;
    /**
     * Цена
     */
    price?: number;
    /**
     * Активность
     */
    is_active?: boolean;
};

export namespace UpdateServicePriceDto {
    /**
     * Тип параметра ценообразования
     */
    export enum parameter_type {
        SIMPLE_CAR_CLASS = 'simple_car_class',
        WHEEL_SIZE = 'wheel_size'
    }
}

export type UserResponseDto = {
    /**
     * UUID пользователя
     */
    uuid: string;
    /**
     * Email пользователя
     */
    email: string;
    /**
     * Имя пользователя
     */
    name: string;
    /**
     * Объект роли пользователя
     */
    role: (RoleResponseDto);
    /**
     * Время последнего входа
     */
    lastLogin?: {
        [key: string]: unknown;
    };
};

export type AppGetHelloResponse = (unknown);

export type AppHealthCheckResponse = (unknown);

export type AuthLoginData = {
    requestBody: LoginDto;
};

export type AuthLoginResponse = (AuthResponseDto);

export type AuthLogoutResponse = (LogoutResponseDto);

export type AuthGetCurrentUserResponse = (UserResponseDto);

export type AuthRefreshResponse = (RefreshResponseDto);

export type RolesGetAllResponse = (Array<Role>);

export type RolesCreateData = {
    requestBody: CreateRoleDto;
};

export type RolesCreateResponse = (Role);

export type RolesGetOneData = {
    /**
     * UUID роли
     */
    uuid: string;
};

export type RolesGetOneResponse = (Role);

export type RolesUpdateData = {
    requestBody: UpdateRoleDto;
    /**
     * UUID роли для обновления
     */
    uuid: string;
};

export type RolesUpdateResponse = (Role);

export type RolesDeleteData = {
    /**
     * UUID роли для уда��ения
     */
    uuid: string;
};

export type RolesDeleteResponse = (unknown);

export type ClientAuthSendCodeData = {
    requestBody: SendCodeDto;
};

export type ClientAuthSendCodeResponse = (unknown);

export type ClientAuthLoginData = {
    requestBody: ClientLoginDto;
};

export type ClientAuthLoginResponse = (ClientAuthResponseDto);

export type ClientAuthRefreshData = {
    requestBody: RefreshDto;
};

export type ClientAuthRefreshResponse = (ClientAuthResponseDto);

export type ClientAuthRegisterResponse = (ClientAuthResponseDto);

export type ClientAuthSetPhoneData = {
    requestBody: SetPhoneDto;
};

export type ClientAuthSetPhoneResponse = (ClientAuthResponseDto);

export type AdminAuthSendCodeData = {
    requestBody: AdminSendCodeDto;
};

export type AdminAuthSendCodeResponse = (AdminSendCodeResponseDto);

export type AdminAuthLoginData = {
    requestBody: AdminLoginDto;
};

export type AdminAuthLoginResponse = (AdminAuthResponseDto);

export type ClientGetMeResponse = (ClientResponseDto);

export type ClientUpdateMeData = {
    requestBody: UpdateClientProfileDto;
};

export type ClientUpdateMeResponse = (ClientResponseDto);

export type ClientListCarsResponse = (Array<CarResponseDto>);

export type ClientCreateCarData = {
    requestBody: CreateCarDto;
};

export type ClientCreateCarResponse = (CarResponseDto);

export type ClientGetCarData = {
    /**
     * Уникальный идентификатор автомобиля
     */
    carUuid: string;
};

export type ClientGetCarResponse = (CarResponseDto);

export type ClientUpdateCarData = {
    /**
     * Уникальный идентификатор автомобиля
     */
    carUuid: string;
    requestBody: UpdateCarDto;
};

export type ClientUpdateCarResponse = (CarResponseDto);

export type ClientDeleteCarData = {
    /**
     * Уникальный идентификатор автомобиля
     */
    carUuid: string;
};

export type ClientDeleteCarResponse = (void);

export type ClientListBookingsResponse = (unknown);

export type ServiceCenterListData = {
    /**
     * Фильтр по типу бизнеса сервисного центра
     */
    businessType?: 'tire_service' | 'car_wash';
    /**
     * Категория услуг для фильтрации
     */
    category?: string;
    /**
     * Максимальная цена услуги
     */
    endPrice?: number;
    /**
     * Фильтр по работающим в данный момент центрам
     */
    isOpenNow?: boolean;
    /**
     * Широта местоположения пользователя
     */
    lat?: number;
    /**
     * Долгота местоположения пользователя
     */
    lon?: number;
    /**
     * Минимальный рейтинг сервисного центра
     */
    minRating?: number;
    /**
     * Показывать только избранные сервисные центры
     */
    onlyFavorites?: boolean;
    /**
     * Радиус поиска в метрах
     */
    radius?: number;
    /**
     * Поисковый запрос для фильтрации по названию или адресу сервисного центра
     */
    search?: string;
    /**
     * Критерий сортировки результатов
     */
    sortBy?: 'distance' | 'rating';
    /**
     * Минимальная цена услуги
     */
    startPrice?: number;
    /**
     * Показывать только сервисные центры со свободными слотами (с учетом фильтров category)
     */
    withFreeSlots?: boolean;
};

export type ServiceCenterListResponse = (Array<ReducedServiceCenterResponseDto>);

export type ServiceCenterGetOneData = {
    /**
     * Уникальный идентификатор сервисного центра
     */
    uuid: string;
};

export type ServiceCenterGetOneResponse = (DetailedServiceCenterResponseDto);

export type ServiceCenterGetSlotsData = {
    /**
     * Дата для поиска доступных слотов
     */
    date: string;
    /**
     * Уникальный идентификатор услуги
     */
    serviceUuid: string;
    /**
     * Уникальный идентификатор сервисного центра
     */
    uuid: string;
};

export type ServiceCenterGetSlotsResponse = (Array<string>);

export type ServiceCenterToggleFavoriteData = {
    /**
     * Уникальный идентификатор сервисного центра
     */
    uuid: string;
};

export type ServiceCenterToggleFavoriteResponse = ({
    /**
     * Новый статус избранного
     */
    isFavorite?: boolean;
});

export type BookingCreateData = {
    requestBody: CreateBookingDto;
};

export type BookingCreateResponse = (BookingResponseDto);

export type BookingListData = {
    /**
     * Количество записей для возврата
     */
    limit?: number;
    /**
     * Смещение для пагинации
     */
    offset?: number;
};

export type BookingListResponse = (Array<BookingResponseDto>);

export type BookingGetOneData = {
    /**
     * Уникальный идентификатор бронирования
     */
    uuid: string;
};

export type BookingGetOneResponse = (DetailedBookingResponseDto);

export type BookingCancelData = {
    /**
     * Уникальный идентификатор бронирования
     */
    uuid: string;
};

export type BookingCancelResponse = (BookingResponseDto);

export type CarsControllerGetMakesData = {
    /**
     * Количество элементов на странице
     */
    limit?: number;
    /**
     * Номер страницы (начинается с 1)
     */
    page?: number;
};

export type CarsControllerGetMakesResponse = ({
    data?: Array<{
        id?: string;
        name?: string;
        cyrillicName?: string;
        numericId?: number;
        yearFrom?: number;
        yearTo?: number;
        popular?: number;
        country?: string;
        updatedAt?: string;
    }>;
    meta?: {
        page?: number;
        limit?: number;
        total?: number;
        totalPages?: number;
        hasNextPage?: boolean;
        hasPrevPage?: boolean;
    };
});

export type CarsControllerGetModelsByMakeIdData = {
    /**
     * Идентификатор марки автомобиля
     */
    id: string;
    /**
     * Количество элементов на странице
     */
    limit?: number;
    /**
     * Номер страницы (начинается с 1)
     */
    page?: number;
};

export type CarsControllerGetModelsByMakeIdResponse = ({
    data?: Array<{
        id?: string;
        markId?: string;
        name?: string;
        cyrillicName?: string;
        yearFrom?: number;
        yearTo?: number;
        class?: string;
        updatedAt?: string;
    }>;
    meta?: {
        page?: number;
        limit?: number;
        total?: number;
        totalPages?: number;
        hasNextPage?: boolean;
        hasPrevPage?: boolean;
    };
});

export type PaymentsControllerCreatePaymentData = {
    requestBody: CreatePaymentDto;
};

export type PaymentsControllerCreatePaymentResponse = (PaymentResponseDto);

export type PaymentsControllerGetAllPaymentsResponse = (Array<PaymentResponseDto>);

export type PaymentsControllerGetPaymentData = {
    uuid: string;
};

export type PaymentsControllerGetPaymentResponse = (PaymentResponseDto);

export type PaymentsControllerGetPaymentByBookingData = {
    bookingUuid: string;
};

export type PaymentsControllerGetPaymentByBookingResponse = (PaymentResponseDto);

export type PaymentsControllerUpdatePaymentStatusData = {
    uuid: string;
};

export type PaymentsControllerUpdatePaymentStatusResponse = (PaymentResponseDto);

export type PaymentsControllerHandleWebhookResponse = (unknown);

export type AdminServicesGetAllData = {
    /**
     * Тип бизнеса (мойка или шиномонтаж)
     */
    businessType?: 'tire_service' | 'car_wash';
    /**
     * Категория услуги
     */
    category?: string;
    /**
     * Фильтр по активности
     */
    isActive?: boolean;
    /**
     * Тип услуги (основная или дополнительная)
     */
    serviceType?: 'main' | 'additional';
};

export type AdminServicesGetAllResponse = (Array<Service>);

export type AdminServicesCreateData = {
    requestBody: CreateServiceDto;
};

export type AdminServicesCreateResponse = (Service);

export type AdminServicesGetOneData = {
    /**
     * UUID услуги
     */
    uuid: string;
};

export type AdminServicesGetOneResponse = (Service);

export type AdminServicesUpdateData = {
    requestBody: UpdateServiceDto;
    /**
     * UUID услуги
     */
    uuid: string;
};

export type AdminServicesUpdateResponse = (Service);

export type AdminServicesDeleteData = {
    /**
     * UUID услуги
     */
    uuid: string;
};

export type AdminServicesDeleteResponse = (unknown);